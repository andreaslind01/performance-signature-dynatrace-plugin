/*
 * Dynatrace Environment API
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.tsystems.mms.apm.performancesignature.dynatracesaas.rest.env2.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * The default aggregation of a metric.
 */
@ApiModel(description = "The default aggregation of a metric.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MetricDefaultAggregation {
  public static final String SERIALIZED_NAME_PARAMETER = "parameter";

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private Double parameter;

  public MetricDefaultAggregation type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * The type of default aggregation.
   *
   * @return type
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of default aggregation.")

  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MetricDefaultAggregation parameter(Double parameter) {

    this.parameter = parameter;
    return this;
  }

  /**
   * The percentile to be delivered. Valid values are between &#x60;0&#x60; and &#x60;100&#x60;.   Applicable only to the &#x60;percentile&#x60; aggregation type.
   *
   * @return parameter
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentile to be delivered. Valid values are between `0` and `100`.   Applicable only to the `percentile` aggregation type.")

  public Double getParameter() {
    return parameter;
  }

  public void setParameter(Double parameter) {
    this.parameter = parameter;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDefaultAggregation metricDefaultAggregation = (MetricDefaultAggregation) o;
    return Objects.equals(this.type, metricDefaultAggregation.type) &&
            Objects.equals(this.parameter, metricDefaultAggregation.parameter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, parameter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDefaultAggregation {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * The type of default aggregation.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUTO("auto"),

    AVG("avg"),

    COUNT("count"),

    MAX("max"),

    MEDIAN("median"),

    MIN("min"),

    PERCENTILE("percentile"),

    SUM("sum"),

    VALUE("value");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

}

