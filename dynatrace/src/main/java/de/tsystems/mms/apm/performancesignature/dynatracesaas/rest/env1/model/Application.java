/*
 * Copyright (c) 2014-2018 T-Systems Multimedia Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace REST API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/section-api) to read about use-cases and examples.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.tsystems.mms.apm.performancesignature.dynatracesaas.rest.env1.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.tsystems.mms.apm.performancesignature.dynatracesaas.model.TagInfo;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static de.tsystems.mms.apm.performancesignature.ui.util.PerfSigUIUtils.toIndentedString;

/**
 * Application
 */

public class Application {
    @SerializedName("entityId")
    private String entityId;
    @SerializedName("displayName")
    private String displayName;
    @SerializedName("customizedName")
    private String customizedName;
    @SerializedName("discoveredName")
    private String discoveredName;
    @SerializedName("firstSeenTimestamp")
    private Long firstSeenTimestamp;
    @SerializedName("lastSeenTimestamp")
    private Long lastSeenTimestamp;
    @SerializedName("tags")
    private List<TagInfo> tags;
    @SerializedName("fromRelationships")
    private ApplicationFromRelationships fromRelationships;
    @SerializedName("toRelationships")
    private Object toRelationships;
    @SerializedName("ruleAppliedMatchType")
    private RuleAppliedMatchTypeEnum ruleAppliedMatchType;
    @SerializedName("ruleAppliedPattern")
    private String ruleAppliedPattern;
    @SerializedName("applicationType")
    private ApplicationTypeEnum applicationType;
    @SerializedName("applicationMatchTarget")
    private ApplicationMatchTargetEnum applicationMatchTarget;

    public Application entityId(String entityId) {
        this.entityId = entityId;
        return this;
    }

    /**
     * Dynatrace entity ID of the required entity.   You can find them in the URL of the corresponding Dynatrace page, for example, &#x60;HOST-007&#x60;.
     *
     * @return entityId
     **/
    @ApiModelProperty(value = "Dynatrace entity ID of the required entity.   You can find them in the URL of the corresponding Dynatrace page, for example, `HOST-007`.")
    public String getEntityId() {
        return entityId;
    }

    public void setEntityId(String entityId) {
        this.entityId = entityId;
    }

    public Application displayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * The name of the Dynatrace entity, displayed in the UI.
     *
     * @return displayName
     **/
    @ApiModelProperty(value = "The name of the Dynatrace entity, displayed in the UI.")
    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Application customizedName(String customizedName) {
        this.customizedName = customizedName;
        return this;
    }

    /**
     * Customized name of the entity
     *
     * @return customizedName
     **/
    @ApiModelProperty(value = "Customized name of the entity")
    public String getCustomizedName() {
        return customizedName;
    }

    public void setCustomizedName(String customizedName) {
        this.customizedName = customizedName;
    }

    public Application discoveredName(String discoveredName) {
        this.discoveredName = discoveredName;
        return this;
    }

    /**
     * Discovered name of the entity
     *
     * @return discoveredName
     **/
    @ApiModelProperty(value = "Discovered name of the entity")
    public String getDiscoveredName() {
        return discoveredName;
    }

    public void setDiscoveredName(String discoveredName) {
        this.discoveredName = discoveredName;
    }

    public Application firstSeenTimestamp(Long firstSeenTimestamp) {
        this.firstSeenTimestamp = firstSeenTimestamp;
        return this;
    }

    /**
     * Timestamp in UTC milliseconds when the entity was detected for the first time.
     *
     * @return firstSeenTimestamp
     **/
    @ApiModelProperty(value = "Timestamp in UTC milliseconds when the entity was detected for the first time.")
    public Long getFirstSeenTimestamp() {
        return firstSeenTimestamp;
    }

    public void setFirstSeenTimestamp(Long firstSeenTimestamp) {
        this.firstSeenTimestamp = firstSeenTimestamp;
    }

    public Application lastSeenTimestamp(Long lastSeenTimestamp) {
        this.lastSeenTimestamp = lastSeenTimestamp;
        return this;
    }

    /**
     * Timestamp in UTC milliseconds when the entity was detected for the last time.
     *
     * @return lastSeenTimestamp
     **/
    @ApiModelProperty(value = "Timestamp in UTC milliseconds when the entity was detected for the last time.")
    public Long getLastSeenTimestamp() {
        return lastSeenTimestamp;
    }

    public void setLastSeenTimestamp(Long lastSeenTimestamp) {
        this.lastSeenTimestamp = lastSeenTimestamp;
    }

    public Application tags(List<TagInfo> tags) {
        this.tags = tags;
        return this;
    }

    public Application addTagsItem(TagInfo tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * The list of entity tags.
     *
     * @return tags
     **/
    @ApiModelProperty(value = "The list of entity tags.")
    public List<TagInfo> getTags() {
        return tags;
    }

    public void setTags(List<TagInfo> tags) {
        this.tags = tags;
    }

    public Application fromRelationships(ApplicationFromRelationships fromRelationships) {
        this.fromRelationships = fromRelationships;
        return this;
    }

    /**
     * Get fromRelationships
     *
     * @return fromRelationships
     **/
    public ApplicationFromRelationships getFromRelationships() {
        return fromRelationships;
    }

    public void setFromRelationships(ApplicationFromRelationships fromRelationships) {
        this.fromRelationships = fromRelationships;
    }

    public Application toRelationships(Object toRelationships) {
        this.toRelationships = toRelationships;
        return this;
    }

    /**
     * The list of incoming calls to the application.
     *
     * @return toRelationships
     **/
    @ApiModelProperty(value = "The list of incoming calls to the application.")
    public Object getToRelationships() {
        return toRelationships;
    }

    public void setToRelationships(Object toRelationships) {
        this.toRelationships = toRelationships;
    }

    public Application ruleAppliedMatchType(RuleAppliedMatchTypeEnum ruleAppliedMatchType) {
        this.ruleAppliedMatchType = ruleAppliedMatchType;
        return this;
    }

    /**
     * @return ruleAppliedMatchType
     **/
    public RuleAppliedMatchTypeEnum getRuleAppliedMatchType() {
        return ruleAppliedMatchType;
    }

    public void setRuleAppliedMatchType(RuleAppliedMatchTypeEnum ruleAppliedMatchType) {
        this.ruleAppliedMatchType = ruleAppliedMatchType;
    }

    public Application ruleAppliedPattern(String ruleAppliedPattern) {
        this.ruleAppliedPattern = ruleAppliedPattern;
        return this;
    }

    /**
     * @return ruleAppliedPattern
     **/
    public String getRuleAppliedPattern() {
        return ruleAppliedPattern;
    }

    public void setRuleAppliedPattern(String ruleAppliedPattern) {
        this.ruleAppliedPattern = ruleAppliedPattern;
    }

    public Application applicationType(ApplicationTypeEnum applicationType) {
        this.applicationType = applicationType;
        return this;
    }

    /**
     * @return applicationType
     **/
    public ApplicationTypeEnum getApplicationType() {
        return applicationType;
    }

    public void setApplicationType(ApplicationTypeEnum applicationType) {
        this.applicationType = applicationType;
    }

    public Application applicationMatchTarget(ApplicationMatchTargetEnum applicationMatchTarget) {
        this.applicationMatchTarget = applicationMatchTarget;
        return this;
    }

    /**
     * @return applicationMatchTarget
     **/
    public ApplicationMatchTargetEnum getApplicationMatchTarget() {
        return applicationMatchTarget;
    }

    public void setApplicationMatchTarget(ApplicationMatchTargetEnum applicationMatchTarget) {
        this.applicationMatchTarget = applicationMatchTarget;
    }

    @Override
    public String toString() {
        return "class Application {\n"
                + "    entityId: " + toIndentedString(entityId) + "\n"
                + "    displayName: " + toIndentedString(displayName) + "\n"
                + "    customizedName: " + toIndentedString(customizedName) + "\n"
                + "    discoveredName: " + toIndentedString(discoveredName) + "\n"
                + "    firstSeenTimestamp: " + toIndentedString(firstSeenTimestamp) + "\n"
                + "    lastSeenTimestamp: " + toIndentedString(lastSeenTimestamp) + "\n"
                + "    tags: " + toIndentedString(tags) + "\n"
                + "    fromRelationships: " + toIndentedString(fromRelationships) + "\n"
                + "    toRelationships: " + toIndentedString(toRelationships) + "\n"
                + "    ruleAppliedMatchType: " + toIndentedString(ruleAppliedMatchType) + "\n"
                + "    ruleAppliedPattern: " + toIndentedString(ruleAppliedPattern) + "\n"
                + "    applicationType: " + toIndentedString(applicationType) + "\n"
                + "    applicationMatchTarget: " + toIndentedString(applicationMatchTarget) + "\n"
                + "}";
    }

    /**
     *
     */
    @JsonAdapter(RuleAppliedMatchTypeEnum.Adapter.class)
    public enum RuleAppliedMatchTypeEnum {
        CONTAINS("CONTAINS"),
        STARTS("STARTS"),
        ENDS("ENDS"),
        MATCHES("MATCHES"),
        ALL_URLS_AND_DOMAINS("ALL_URLS_AND_DOMAINS"),
        EQUALS("EQUALS");

        private final String value;

        RuleAppliedMatchTypeEnum(String value) {
            this.value = value;
        }

        public static RuleAppliedMatchTypeEnum fromValue(String text) {
            return Arrays.stream(RuleAppliedMatchTypeEnum.values()).filter(b -> String.valueOf(b.value).equals(text)).findFirst().orElse(null);
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<RuleAppliedMatchTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RuleAppliedMatchTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RuleAppliedMatchTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RuleAppliedMatchTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }


    /**
     *
     */
    @JsonAdapter(ApplicationTypeEnum.Adapter.class)
    public enum ApplicationTypeEnum {
        DEFAULT("DEFAULT"),
        RUMONLY("RUMONLY"),
        SYNTHETIC("SYNTHETIC"),
        CUSTOM("CUSTOM"),
        AMP("AMP"),
        SAAS_VENDOR("SAAS_VENDOR");

        private final String value;

        ApplicationTypeEnum(String value) {
            this.value = value;
        }

        public static ApplicationTypeEnum fromValue(String text) {
            return Arrays.stream(ApplicationTypeEnum.values()).filter(b -> String.valueOf(b.value).equals(text)).findFirst().orElse(null);
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ApplicationTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ApplicationTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ApplicationTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ApplicationTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     *
     */
    @JsonAdapter(ApplicationMatchTargetEnum.Adapter.class)
    public enum ApplicationMatchTargetEnum {
        URL("URL"),
        DOMAIN("DOMAIN");

        private final String value;

        ApplicationMatchTargetEnum(String value) {
            this.value = value;
        }

        public static ApplicationMatchTargetEnum fromValue(String text) {
            return Arrays.stream(ApplicationMatchTargetEnum.values()).filter(b -> String.valueOf(b.value).equals(text)).findFirst().orElse(null);
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ApplicationMatchTargetEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ApplicationMatchTargetEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ApplicationMatchTargetEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ApplicationMatchTargetEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

