/*
 * Copyright (c) 2014-2018 T-Systems Multimedia Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace REST API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/section-api) to read about use-cases and examples.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.tsystems.mms.apm.performancesignature.dynatracesaas.rest.env1.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

import static de.tsystems.mms.apm.performancesignature.ui.util.PerfSigUIUtils.toIndentedString;

/**
 * Result of an Event Feed Query
 */
@ApiModel(description = "Result of an Event Feed Query")

public class EventQueryResult {
    @SerializedName("nextEventStartTms")
    private Long nextEventStartTms;

    @SerializedName("nextEventId")
    private Long nextEventId;

    @SerializedName("nextCursor")
    private String nextCursor;

    @SerializedName("from")
    private Long from;

    @SerializedName("to")
    private Long to;

    @SerializedName("totalEventCount")
    private Long totalEventCount;

    @SerializedName("events")
    private List<EventRestEntry> events;

    public EventQueryResult nextEventStartTms(Long nextEventStartTms) {
        this.nextEventStartTms = nextEventStartTms;
        return this;
    }

    /**
     * Start time of the next event if the total number of events exceeds the maximum batch size of 150 events per request.
     *
     * @return nextEventStartTms
     **/
    @ApiModelProperty(value = "Start time of the next event if the total number of events exceeds the maximum batch size of 150 events per request. ")
    public Long getNextEventStartTms() {
        return nextEventStartTms;
    }

    public void setNextEventStartTms(Long nextEventStartTms) {
        this.nextEventStartTms = nextEventStartTms;
    }

    public EventQueryResult nextEventId(Long nextEventId) {
        this.nextEventId = nextEventId;
        return this;
    }

    /**
     * ID of the next event if the total number of events exceeds the maximum batch size of 150 events per request.
     *
     * @return nextEventId
     **/
    @ApiModelProperty(value = "ID of the next event if the total number of events exceeds the maximum batch size of 150 events per request. ")
    public Long getNextEventId() {
        return nextEventId;
    }

    public void setNextEventId(Long nextEventId) {
        this.nextEventId = nextEventId;
    }

    public EventQueryResult nextCursor(String nextCursor) {
        this.nextCursor = nextCursor;
        return this;
    }

    /**
     * If the result would return more than 150 events, nextCursor contains a string that can be used to fetch the next 150 results. If nextCursor is null, then there are no more events returned by the query.
     *
     * @return nextCursor
     **/
    @ApiModelProperty(value = "If the result would return more than 150 events, nextCursor contains a string that can be used to fetch the next 150 results. If nextCursor is null, then there are no more events returned by the query.")
    public String getNextCursor() {
        return nextCursor;
    }

    public void setNextCursor(String nextCursor) {
        this.nextCursor = nextCursor;
    }

    public EventQueryResult from(Long from) {
        this.from = from;
        return this;
    }

    /**
     * Start of the query timeframe
     *
     * @return from
     **/
    @ApiModelProperty(value = "Start of the query timeframe")
    public Long getFrom() {
        return from;
    }

    public void setFrom(Long from) {
        this.from = from;
    }

    public EventQueryResult to(Long to) {
        this.to = to;
        return this;
    }

    /**
     * End of the query timeframe
     *
     * @return to
     **/
    @ApiModelProperty(value = "End of the query timeframe")
    public Long getTo() {
        return to;
    }

    public void setTo(Long to) {
        this.to = to;
    }

    public EventQueryResult totalEventCount(Long totalEventCount) {
        this.totalEventCount = totalEventCount;
        return this;
    }

    /**
     * Total amount of events found
     *
     * @return totalEventCount
     **/
    @ApiModelProperty(value = "Total amount of events found")
    public Long getTotalEventCount() {
        return totalEventCount;
    }

    public void setTotalEventCount(Long totalEventCount) {
        this.totalEventCount = totalEventCount;
    }

    public EventQueryResult events(List<EventRestEntry> events) {
        this.events = events;
        return this;
    }

    public EventQueryResult addEventsItem(EventRestEntry eventsItem) {
        if (this.events == null) {
            this.events = new ArrayList<>();
        }
        this.events.add(eventsItem);
        return this;
    }

    /**
     * List of events
     *
     * @return events
     **/
    @ApiModelProperty(value = "List of events")
    public List<EventRestEntry> getEvents() {
        return events;
    }

    public void setEvents(List<EventRestEntry> events) {
        this.events = events;
    }

    @Override
    public String toString() {
        return "class EventQueryResult {\n" +
                "    nextEventStartTms: " + toIndentedString(nextEventStartTms) + "\n" +
                "    nextEventId: " + toIndentedString(nextEventId) + "\n" +
                "    nextCursor: " + toIndentedString(nextCursor) + "\n" +
                "    from: " + toIndentedString(from) + "\n" +
                "    to: " + toIndentedString(to) + "\n" +
                "    totalEventCount: " + toIndentedString(totalEventCount) + "\n" +
                "    events: " + toIndentedString(events) + "\n" +
                "}";
    }
}

