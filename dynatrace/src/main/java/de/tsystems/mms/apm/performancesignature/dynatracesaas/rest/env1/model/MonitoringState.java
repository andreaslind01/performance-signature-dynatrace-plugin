/*
 * Copyright (c) 2014-2018 T-Systems Multimedia Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace REST API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/section-api) to read about use-cases and examples.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.tsystems.mms.apm.performancesignature.dynatracesaas.rest.env1.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Arrays;

import static de.tsystems.mms.apm.performancesignature.ui.util.PerfSigUIUtils.toIndentedString;

/**
 * Defines the current monitoring state of an entity.
 */
@ApiModel(description = "Defines the current monitoring state of an entity.")

public class MonitoringState {
    @SerializedName("actualMonitoringState")
    private MonitoringStateEnum actualMonitoringState;
    @SerializedName("expectedMonitoringState")
    private MonitoringStateEnum expectedMonitoringState;
    @SerializedName("restartRequired")
    private Boolean restartRequired;

    public MonitoringState actualMonitoringState(MonitoringStateEnum actualMonitoringState) {
        this.actualMonitoringState = actualMonitoringState;
        return this;
    }

    /**
     * The current actual monitoring state on the entity.
     *
     * @return actualMonitoringState
     **/
    @ApiModelProperty(value = "The current actual monitoring state on the entity.")
    public MonitoringStateEnum getActualMonitoringState() {
        return actualMonitoringState;
    }

    public void setActualMonitoringState(MonitoringStateEnum actualMonitoringState) {
        this.actualMonitoringState = actualMonitoringState;
    }

    public MonitoringState expectedMonitoringState(MonitoringStateEnum expectedMonitoringState) {
        this.expectedMonitoringState = expectedMonitoringState;
        return this;
    }

    /**
     * The monitoring which is expected from the configuration
     *
     * @return expectedMonitoringState
     **/
    @ApiModelProperty(value = "The monitoring which is expected from the configuration")
    public MonitoringStateEnum getExpectedMonitoringState() {
        return expectedMonitoringState;
    }

    public void setExpectedMonitoringState(MonitoringStateEnum expectedMonitoringState) {
        this.expectedMonitoringState = expectedMonitoringState;
    }

    public MonitoringState restartRequired(Boolean restartRequired) {
        this.restartRequired = restartRequired;
        return this;
    }

    /**
     * Defines whether or not the process has to restarted to enable monitoring
     *
     * @return restartRequired
     **/
    @ApiModelProperty(value = "Defines whether or not the process has to restarted to enable monitoring")
    public Boolean isRestartRequired() {
        return restartRequired;
    }

    public void setRestartRequired(Boolean restartRequired) {
        this.restartRequired = restartRequired;
    }

    @Override
    public String toString() {
        return "class MonitoringState {\n"
                + "    actualMonitoringState: " + toIndentedString(actualMonitoringState) + "\n"
                + "    expectedMonitoringState: " + toIndentedString(expectedMonitoringState) + "\n"
                + "    restartRequired: " + toIndentedString(restartRequired) + "\n"
                + "}";
    }

    /**
     * The current actual monitoring state on the entity.
     */
    @JsonAdapter(MonitoringStateEnum.Adapter.class)
    public enum MonitoringStateEnum {
        ON("ON"),
        OFF("OFF");

        private final String value;

        MonitoringStateEnum(String value) {
            this.value = value;
        }

        public static MonitoringStateEnum fromValue(String text) {
            return Arrays.stream(MonitoringStateEnum.values()).filter(b -> String.valueOf(b.value).equals(text)).findFirst().orElse(null);
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<MonitoringStateEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MonitoringStateEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public MonitoringStateEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return MonitoringStateEnum.fromValue(String.valueOf(value));
            }
        }
    }
}

